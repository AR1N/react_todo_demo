{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","state","list","val","e","this","setState","target","value","unshift","index","splice","message","success","className","src","logo","alt","size","onChange","bind","placeholder","allowClear","type","onClick","onSubmit","style","marginLeft","map","item","key","title","onConfirm","onDelete","okText","cancelText","CloseCircleFilled","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"+PAmEeA,G,wDA5Dd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,KAAM,GACNC,IAAK,IAJY,E,qDAOVC,GACRC,KAAKC,SAAS,CACbH,IAAKC,EAAEG,OAAOC,U,iCAIVH,KAAKJ,MAAME,MAChBE,KAAKJ,MAAMC,KAAKO,QAAQJ,KAAKJ,MAAME,KACnCE,KAAKC,UAAS,SAAAL,GAAK,MAAG,CACrBC,KAAK,YAAKD,EAAMC,MAChBC,IAAK,U,+BAIGO,GACTL,KAAKJ,MAAMC,KAAKS,OAAOD,EAAO,GAC9BL,KAAKC,SAAS,CACbJ,KAAK,YAAKG,KAAKJ,MAAMC,QAEtBU,IAAQC,QAAQ,oB,+BAEP,IAAD,OACR,OACC,kBAAC,WAAD,KACC,yBAAKC,UAAU,mBACd,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,SACrC,wBAAIH,UAAU,SAAd,mBACA,yBAAKA,UAAU,eACd,kBAAC,IAAD,CAAON,MAAOH,KAAKJ,MAAME,IAAKe,KAAK,QAAQC,SAAUd,KAAKc,SAASC,KAAKf,MAAOgB,YAAY,yBAAUC,YAAU,IAC/G,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAASnB,KAAKoB,SAASL,KAAKf,MAAOa,KAAK,QAAQQ,MAAO,CAAEC,WAAY,SAA5F,iBAED,yBAAKb,UAAU,QAEbT,KAAKJ,MAAMC,KAAK0B,KAAI,SAACC,EAAMnB,GAC1B,OAAO,yBAAKI,UAAU,YAAYgB,IAAKpB,GAAQmB,EAC9C,kBAAC,IAAD,CACCE,MAAM,oCACNC,UAAW,EAAKC,SAASb,KAAK,EAAKV,GACnCwB,OAAO,MACPC,WAAW,MAEX,kBAACC,EAAA,EAAD,CAAoBtB,UAAU,yB,GAjDtBuB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,a,mBEzI5B6C,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.0a0cdd21.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Button, Input, Popconfirm, message } from 'antd';\nimport { CloseCircleFilled } from '@ant-design/icons';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tlist: [],\n\t\t\tval: ''\n\t\t}\n\t}\n\tonChange(e) {\n\t\tthis.setState({\n\t\t\tval: e.target.value\n\t\t})\n\t}\n\tonSubmit() {\n\t\tif (!this.state.val) return\n\t\tthis.state.list.unshift(this.state.val)\n\t\tthis.setState(state=>({\n\t\t\tlist: [...state.list],\n\t\t\tval: ''\n\t\t}))\n\t\t\t\n\t}\n\t onDelete(index) {\n\t\tthis.state.list.splice(index, 1)\n\t\tthis.setState({\n\t\t\tlist: [...this.state.list]\n\t\t})\n\t\tmessage.success('delete success');\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className='App flex-center'>\n\t\t\t\t\t<img src={logo} className='logo' alt='logo'></img>\n\t\t\t\t\t<h1 className='title'>react todo demo</h1>\n\t\t\t\t\t<div className=\"flex-center\">\n\t\t\t\t\t\t<Input value={this.state.val} size=\"large\" onChange={this.onChange.bind(this)} placeholder='请输入todo' allowClear ></Input>\n\t\t\t\t\t\t<Button type=\"primary\" onClick={this.onSubmit.bind(this)} size=\"large\" style={{ marginLeft: '15px' }} >确定</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"list\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.list.map((item, index) => {\n\t\t\t\t\t\t\t\treturn <div className='item-cell' key={index}>{item}\n\t\t\t\t\t\t\t\t\t<Popconfirm\n\t\t\t\t\t\t\t\t\t\ttitle=\"Are you sure to delete this task?\"\n\t\t\t\t\t\t\t\t\t\tonConfirm={this.onDelete.bind(this,index)}\n\t\t\t\t\t\t\t\t\t\tokText=\"Yes\"\n\t\t\t\t\t\t\t\t\t\tcancelText=\"No\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CloseCircleFilled  className='del-icon' />\n\t\t\t\t\t\t\t\t\t</Popconfirm>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}